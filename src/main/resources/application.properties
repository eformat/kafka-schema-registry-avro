# set the connector for the outgoing channel to `smallrye-kafka`
mp.messaging.outgoing.movies.connector=smallrye-kafka
# set the topic name for the channel to `movies`
mp.messaging.outgoing.movies.topic=movies
# automatically register the schema with the registry, if not present
mp.messaging.outgoing.movies.apicurio.registry.auto-register=true

# set the connector for the incoming channel to `smallrye-kafka`
mp.messaging.incoming.movies-from-kafka.connector=smallrye-kafka
# set the topic name for the channel to `movies`
mp.messaging.incoming.movies-from-kafka.topic=movies
# disable auto-commit, Reactive Messaging handles it itself
mp.messaging.incoming.movies-from-kafka.enable.auto.commit=false
mp.messaging.incoming.movies-from-kafka.auto.offset.reset=earliest

%rhosak.mp.messaging.outgoing.movies.apicurio.auth.realm=${OAUTH_REALM:rhoas}
%rhosak.mp.messaging.outgoing.movies.apicurio.auth.service.url=${OAUTH_SERVER_URL:https://identity.api.openshift.com/auth}
%rhosak.mp.messaging.outgoing.movies.apicurio.auth.client.id=${CLIENT_ID}
%rhosak.mp.messaging.outgoing.movies.apicurio.auth.client.secret=${CLIENT_SECRET}

%rhosak.mp.messaging.outgoing.movies.apicurio.registry.find-latest=true
%rhosak.mp.messaging.outgoing.movies.apicurio.registry.artifact-resolver-strategy=io.apicurio.registry.serde.avro.strategy.TopicRecordIdStrategy
%rhosak.mp.messaging.outgoing.movies.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider
%rhosak.mp.messaging.outgoing.movies.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
%rhosak.mp.messaging.outgoing.movies.key.serializer=org.apache.kafka.common.serialization.StringSerializer

%rhosak.mp.messaging.incoming.movies-from-kafka.apicurio.auth.realm=${OAUTH_REALM:rhoas}
%rhosak.mp.messaging.incoming.movies-from-kafka.apicurio.auth.service.url=${OAUTH_SERVER_URL:https://identity.api.openshift.com/auth}
%rhosak.mp.messaging.incoming.movies-from-kafka.apicurio.auth.client.id=${CLIENT_ID}
%rhosak.mp.messaging.incoming.movies-from-kafka.apicurio.auth.client.secret=${CLIENT_SECRET}

%rhosak.mp.messaging.incoming.movies-from-kafka.apicurio.registry.find-latest=true
%rhosak.mp.messaging.incoming.movies-from-kafka.apicurio.registry.artifact-resolver-strategy=io.apicurio.registry.serde.avro.strategy.TopicRecordIdStrategy
%rhosak.mp.messaging.incoming.movies-from-kafka.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider
%rhosak.mp.messaging.incoming.movies-from-kafka.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
%rhosak.mp.messaging.incoming.movies-from-kafka.key.serializer=org.apache.kafka.common.serialization.StringSerializer

%rhosak.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${REGISTRY_URL}

# Kafka servers and auth configuration
%rhosak.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
%rhosak.kafka.security.protocol=SASL_SSL

%rhosak.kafka.sasl.mechanism=OAUTHBEARER
%rhosak.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
%rhosak.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
